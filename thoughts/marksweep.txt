Can I just skip the cycle detection?  My knowing the topmost object of what
could be a cycle?

Also: maybe we should just figure out what syntax we want, then find consistent
semantics for it.  Meh, for now, see how far I can run with value-semantics
only!

new node = {
  value : int
  right : node*
  new = @(v:value)->self { value = v }
}

n1 = node(4)
n2 = node(7)

!!!! WHOAAAA.  OK.  Part of the problem here is the "constructor" business:

n1 = node(4)
n2 = n1       # we did all that work to *construct* n1.  Feels weird to have it
              # just get automatically copied over.  But that's stupid reference
              # language talking!
n1 = node(7)
print n1 ~~ n2    # 7 4

n1 = node(4)
n2 = node(7)

n1.right = n2*


new node = {
  value : int
  parent : node*|null
  child : node*|null
  new = @(v:value)->self { value = v }
}
