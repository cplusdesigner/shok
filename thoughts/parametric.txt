Parametric polymorphism: this was a term I could never "remember", until I read over the wikipedia definition a few times:

In programming languages and type theory, parametric polymorphism is a way to
make a language more expressive, while still maintaining full static
type-safety. Using parametric polymorphism, a function or a data type can be
written generically so that it can handle values identically without depending
on their type.[1] Such functions and data types are called generic functions
and generic datatypes respectively and form the basis of generic programming.

Its word "identically" is in italics, and that is what triggered my a-ha
moment.  The significance is that a fun(T) is parameterized around T in such a
way that it knows that any uses of T have to all be the *same* T.  i.e. this is
different than foo(object)  where you pass it a T and it can't inside itself
express other things that are also of type T.

Previously I could identify when this parametric-ness was occurring, but didn't
have a good "feeling" for why it was different than anything else.  And
certainly not what the term "parametric polymorphism" meant.
