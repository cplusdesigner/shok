#!/bin/shok

# Binary search tree
# Assumes methods can mutate their immediate object's members

{
  new node = {
    value : int
    left : node|null = null
    right : node|null = null
    parent : node*|null = null
    new = @(v:value)->self { value = v }
  }

  new tree = {
    root : node|null = null

    insert = @(v:int) {
      new cursor:node*|null = root*
      new prev:node*|null = null
      new is_left = false
      while cursor != null {
        prev = cursor
        if v < cursor.value {
          is_left = true
          cursor = cursor.left*
        } else if (v > cursor.value) {
          is_left = false
          cursor = cursor.right*
        }
      }
      if is_left {
          prev.left = node(v)
          prev.parent = ...
      } else {
      }
    }
  }
}
