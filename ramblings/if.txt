styles of if:
-------------

1. require () in the condition

# with {}'s
new max = @(int a, int b)->int {
  if (a > b) {
    return a
  } else {
    return b
  }
}
# no {}'s
new max = @(int a, int b)->int {
  if (a > b) return a
  else return b
}
# one line with {}'s
new max = @(int a, int b)->int {
  if (a > b) { return a } else { return b }
}
# one line no {}'s
new max = @(int a, int b)->int {
  if (a > b) return a; else return b
}
# without else block...
new max = @(int a, int b)->int {
  if (a > b) {
    return a
  }
  return b
}
new max = @(int a, int b)->int {
  if (a > b) return a
  return b
}
new max = @(int a, int b)->int {
  if (a > b) { return a }; return b       # is ; required here?
}
new max = @(int a, int b)->int {
  if (a > b) return a; return b           # yikes
}


2. use , to help split the condition from the body, where necessary

# with {}'s
new max = @(int a, int b)->int {
  if a > b {
    return a
  } else {
    return b
  }
}
# no {}'s
new max = @(int a, int b)->int {
  if a > b, return a
  else, return b
}
# one line with {}'s
new max = @(int a, int b)->int {
  if a > b { return a } else { return b }
}
# one line no {}'s
new max = @(int a, int b)->int {
  if a > b, return a; else, return b
}
# without else...
new max = @(int a, int b)->int {
  if a > b {
    return a
  }
  return b
}
# no {}'s
new max = @(int a, int b)->int {
  if a > b, return a
  return b
}
# one line with {}'s
new max = @(int a, int b)->int {
  if a > b { return a }; return b         # is ; required here?
}
# one line no {}'s
new max = @(int a, int b)->int {
  if a > b, return a; return b            # yikes
}
