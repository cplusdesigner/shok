Motivation

/Another/ command shell?

There really aren't /that/ many.  I consider the major categories as follows:
  DOS
  Powershell
  sh and its major derivatives (bash, ksh, csh/tcsh)
  rc (plan9)
  zsh
  fish
  urbit

All are interesting and relevant, but shok is exploring a very different set of
ideas than other shells (with the possible exception of urbit, which is in many
ways a similar approach but extended waayy farther than mortals yet tread).

The most important idea of shok is the delicate way it integrates a programming
language into the shell.

/Another/ programming language?

With shok's syntax for switching between the command-line and a programming
language, one could imagine embedding any existing language back there.
However, shok asserts that the domain-specific requirements of an OS shell
motivate a new language optimized to work in that space.  Specifically:

Smooth integration: The language's syntax needs to smoothly integrate the
command-line, switching back and forth between modes without clogging the
language's syntax.

Domain-specific language features: The language was designed for the needs of
the shell, especially as regards filesystem interaction, job management, and a
typist-friendly syntax.  Path literals and native filesystem types are among
the specific offerings the language provides.

Security:  This is a big one.  The command-shell is one of the most notoriously
dangerous part of system access, for several reasons including:
 - A core task of the shell is filesystem interaction, which means directly
   modifying and deleting files on the system.  This is typically only
   restricted by very coarse permissioning provided by the OS, so a shell is
   almost always capable of easily and irrevocably destroying much of its
   user's data.
 - Invoking malicious programs, or regular programs with unintended arguments,
   can also wreak havoc on a system.
 - Basic shell primitives are historically tedious to use and error-prone.
 - Operating systems are very complex, and the shell is typically a thin
   interface on top of the OS's convoluted semantics.
 - The command-line is often used to access different computers, so the user
   has to be aware of how the shell might behave differently depending on where
   they are logged in.

For all these reasons, the programming language itself should be designed with
security in mind.  Many dynamic languages (including most shells) take the
approach that every instruction will be executed until an error is found, even
if it is a basic syntax error.  The result is that the user may be left in an
inconsistent state, where some operations have been applied but not others.

Alternatively, shok considers it a responsibility to perform as much static
analysis as possible on a block of code before executing any part of it.  To
this end, it uses a strong static type system and a reliable memory ownership
mechanism.  The interpreter also uses "ASAP" parsing to discover errors as
early as possible.
